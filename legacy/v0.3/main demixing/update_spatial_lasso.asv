function [A_out, A_bg_out, bg_spatial_out] = update_spatial_lasso(processed_video, ...
                A_mat, A_bg_mat, C, C_bg, bg_spatial, bg_temporal, IND_mat, IND_bg_mat, maxIter, sn, q)

%% update spatial components using constrained non-negative lasso with warm started HALS 
%  with consideration about the 

% input: 
%       Y:    d x T,  fluorescence data
%       A:    K element cell,  spatial components
%       C:    K element cell,  temporal components
% bg_spatial: d x 1,  spatial background
% bg_temporal: 1 x T, temporal backgrond
%     IND:    K element cell,  spatial extent for each component
%      sn:    d x 1,  noise std for each pixel
%       q:    scalar, control probability for FDR (default: 0.75), FDR for false discover rate?
% maxIter:    maximum HALS iteration (default: 40)
% options:    options structure

% output: 
%   A_out: d*K, updated spatial components. Note taht K may contain the
%   background term

% last update: 5/23/2021. YZ
%% options for HALS
%norm_C_flag = false;
movie_size = size(processed_video);
%% concatenate different views
size_h = movie_size(1);
size_w = movie_size(2);
Y = zeros(size_h * size_w * movie_size(4), movie_size(3), 'single');
for i = 1 : movie_size(4)
    buf = processed_video(:, :, :, i);
    buf = reshape(buf, [], movie_size(3));
    Y(size_h * size_w  * (i - 1) + 1 : size_h * size_w  * i, :) = buf;
end


tol = 1e-3;
repeat = 1;

% penalty related
if nargin < 12 || isempty(q); q = 0.75; end

if nargin<11 || isempty(sn)
    % nosie option
    sn_options.noise_range = [0.25,0.7];
    sn_options.noise_method = 'logmexp';
    sn_options.block_size = [64,64];
    sn_options.split_data = false;
    sn_options.max_timesteps = 3000;
    
    sn = get_noise_fft(Y,sn_options);  
end % sn is the average of power spectrum of Y along time domain

if nargin < 10 || isempty(maxIter); maxIter = 40; end


%% cell to matrix

% process A
% A_mat = cell_process_A(A, movie_size);
% clear A
% A_bg_mat = cell_process_A(A_bg, movie_size);
% clear A_bg
% IND_mat = cell_process_A(IND, movie_size);
% clear IND
% IND_bg_mat = cell_process_A(IND_bg, movie_size);
% clear IND_bg

% process bg
bg_spatial = reshape(bg_spatial, [], 1);


[d, nr] = size(A_mat);
K = nr + size(bg_spatial, 2) + nr; 
% here K is the neuron number + background component number, nr is the neuron number

%% combine
A_mat = [A_mat, sparse(double(bg_spatial)), A_bg_mat]; clear A_bg_mat
C_mat = [C; bg_temporal; C_bg];

T = size(C_mat,2);
sn = double(sn);

YC = double(mm_fun(C_mat,Y)); % this is weird, why make C times Y

%% initialization 
V = double(C_mat*C_mat'); 
cc = diag(V);   % array of  squared of l2 norm for all components, this is a easy way to calculate the L2 norm

%% updating (neuron by neuron)
miter = 0;
while repeat && miter < maxIter % this is the main iteration. all the step is hals
    A_ = A_mat;
    for k=1:K        % for (each neuron + background component)
        k
        if k <= nr
            lam = sqrt(cc(k)); %max(sqrt(cc(tmp_ind))); % get the l2 norm of V
            tmp_ind = IND_mat(:, k); % note: here IND is a sparse matrix, so only locally update
        elseif k == nr + 1
            lam = 0;
            tmp_ind = true(d, 1);
        elseif k >= nr + 2
            lam = sqrt(cc(k)); %max(sqrt(cc(tmp_ind))); % get the l2 norm of V
            tmp_ind = IND_bg_mat(:, k - (nr + 1)); % note: here IND is a sparse matrix, so only locally update            
        end
        LAM = norminv(q)*sn*lam; % norminv is the inverse of the normcdf, to this is automatically assign the penaly coefficient
        ak = max(0, full(A_mat(tmp_ind, k))+(full(YC(tmp_ind, k)) - LAM(tmp_ind) ...
            - full(A_mat(tmp_ind,:))*V(:, k))/cc(k)); % this is a standard HALS step. see the paper for more details
        A_mat(tmp_ind, k) = ak; 
    end
    miter = miter + 1;
    repeat = (sqrt(sum((A_mat(:)-A_(:)).^2)/sum(A_(:).^2)) > tol);    % stop critiera:
end
%% update the variable
% neuron

A_out = A_mat(:, 1 : nr);
A_bg_out = A_mat(:, nr + 2 : 2 * nr + 1);
bg_spatial_out = reshape(A_mat(:, end), [], movie_size(4));

% background
f = C_mat(nr+1,:); % separate f
Yf = full(YC(:,nr+1)); %Y*f';
b = double(max((double(Yf) - (A_mat(:,1:nr)*double(C_mat(1:nr,:)) + ...
    A_mat(:,nr + 2 : end) * double(C_mat(nr + 2: end,:)))*f')/(f*f'),0)); % separate b
bg_spatial_out = reshape(b, [], movie_size(4));
end



